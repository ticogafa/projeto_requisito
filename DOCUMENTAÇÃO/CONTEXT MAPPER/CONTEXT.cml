  Domain Barbearia {}

  BoundedContext SistemaBarbearia implements Barbearia {

    Aggregate Agendamento {
      Entity Agendamento {
        aggregateRoot
        AgendamentoId id
        Date dataHora
        String status
        ClienteId clienteId
        ProfissionalId profissionalId
        ServicoOferecidoId servicoId
      }

      Service AgendamentoServico {
        @Agendamento criar(@Agendamento agendamento, int duracaoServicoMinutos);
        @Agendamento buscarPorId(AgendamentoId id);
        @Agendamento confirmar(AgendamentoId id);
        @Agendamento cancelar(AgendamentoId id);
      }

      Repository AgendamentoRepositorio {
        List<Agendamento> buscarPorCliente(ClienteId clienteId)
        List<Agendamento> buscarPorProfissional(ProfissionalId profissionalId)
        List<Agendamento> buscarPorStatus(String status)
      }
    }

    Aggregate Profissional {
      Entity Profissional {
        aggregateRoot
        ProfissionalId id
        String nome
        Email email
        Cpf cpf
        Telefone telefone
        String senioridade
        boolean ativo
      }

      Service ProfissionalServico {
        Profissional registrarNovo(Profissional profissional)
        Profissional buscarPorId(ProfissionalId id)
        Profissional atualizar(Profissional profissional)
        Profissional desativar(ProfissionalId id, String motivo)
      }

      Repository ProfissionalRepositorio {
        Profissional buscarPorCpf(Cpf cpf)
        boolean existePorCpf(Cpf cpf)
      }
    }

    Aggregate ServicoOferecido {
      Entity ServicoOferecido {
        aggregateRoot
        ServicoOferecidoId id
        ProfissionalId profissionalId
        String nome
        BigDecimal preco
        Integer duracaoMinutos
        boolean ativo
      }

      Service ServicoOferecidoServico {
        ServicoOferecido buscarPorId(ServicoOferecidoId id)
        ServicoOferecido registrar(ServicoOferecido servico)
        ServicoOferecido atualizarPreco(ServicoOferecidoId id, BigDecimal novoPreco)
      }

      Repository ServicoOferecidoRepositorio {
        List<ServicoOferecido> buscarPorProfissional(ProfissionalId profissionalId)
      }
    }

    Aggregate Produto {
      Entity Produto {
        aggregateRoot
        ProdutoId id
        String nome
        int estoque
        BigDecimal preco
        int estoqueMinimo
      }

      Service ProdutoServico {
        Produto salvar(Produto produto)
        Produto buscarPorId(ProdutoId id)
        Produto aumentarEstoque(ProdutoId id, int quantidade)
        Produto baixaEstoque(ProdutoId id, int quantidade)
      }

      Repository ProdutoRepositorio {
        List<Produto> listarProdutosComEstoqueBaixo()
      }
    }

    Aggregate ItemVenda {
      Entity ItemVenda {
        aggregateRoot
        ItemVendaId id
        VendaId vendaId
        ProdutoId produtoId
        ServicoOferecidoId servicoId
        int quantidade
        BigDecimal precoTotal
      }

      Service ItemVendaServico {
        ItemVenda registrar(ItemVenda itemVenda)
        ItemVenda buscarPorId(ItemVendaId id)
      }

      Repository ItemVendaRepositorio {}
    }

    Aggregate Venda {
      Entity Venda {
        aggregateRoot
        VendaId id
        ClienteId clienteId
        Date dataVenda
        BigDecimal valorTotal
      }

      Service VendaServico {
        Venda registrarVendaPDV(Venda venda)
        Venda buscarPorId(VendaId id)
      }

      Repository VendaRepositorio {}
    }

    Aggregate Pagamento {
      Entity Pagamento {
        aggregateRoot
        PagamentoId id
        String meioPagamento
      }

      Service PagamentoServico {
        Pagamento registrar(Pagamento pagamento)
        Pagamento buscarPorId(PagamentoId id)
      }

      Repository PagamentoRepositorio {}
    }

    Aggregate Cliente {
      Entity Cliente {
        aggregateRoot
        ClienteId id
        String nome
        Email email
        Cpf cpf
        Telefone telefone
        int pontos
      }

      Service ClienteServico {
        Cliente criarCliente(Cliente cliente)
        Cliente buscarPorId(ClienteId id)
        Cliente adicionarPontos(ClienteId id, int pontos)
      }

      Repository ClienteRepositorio {
        Optional<Cliente> buscarPorEmail(Email email)
        Optional<Cliente> buscarPorCpf(Cpf cpf)
      }
    }

    Aggregate Lancamento {
      Entity Lancamento {
        aggregateRoot
        LancamentoId id
        ClienteId clienteId
        String status
        BigDecimal valor
        Date quando
      }

      Service GestaoCaixaServico {
        void registrarEntrada(String descricao, double valor)
        void registrarSaida(String descricao, double valor)
      }

      Repository LancamentoRepositorio {
        List<Lancamento> buscarPendentesPorCliente(ClienteId clienteId)
      }
    }

    Aggregate Voucher {
      Entity Voucher {
        aggregateRoot
        VoucherId id
        ClienteId clienteId
        BigDecimal valorDesconto
        String status
        Date expiraEm
      }

      Repository VoucherRepositorio {}
    }

  }
