@startuml
hide circle
skinparam classAttributeIconSize 0
skinparam linetype ortho

' ======================= CONTEXTO DE AGENDAMENTO =======================
package "Contexto de Agendamento" {
  class Agendamento {
    + Integer id // PK, DEFAULT Integer()
    + Integer clienteId // FK Cliente(id), NOT NULL
    + Integer profissionalId // FK Profissional(id), NOT NULL
    + Integer servicoId // FK Servico(id), NOT NULL
    + LocalDateTime dataHora // NOT NULL
    + StatusAgendamento status = PENDENTE // DEFAULT
    + String observacoes // opcional
  }

  enum StatusAgendamento {
    PENDENTE
    CONFIRMADO
    CANCELADO
    CONCLUIDO
  }

  note right of Agendamento
    Regras:
    • Só criar se horário estiver livre
    • Respeitar jornada do profissional
    • Cancelar até 2h antes
    • Duração = duração do Serviço
  end note
}

' ================= CONTEXTO DE PROFISSIONAIS E SERVIÇOS =================
package "Contexto de Profissionais e Serviços" {
  class Servico {
    + Integer id // PK
    + String nome // NOT NULL
    + BigDecimal preco // NOT NULL
    + int duracaoMinutos // NOT NULL
  }

  class Profissional {
    + Integer id // PK
    + String nome // NOT NULL
    + String email // UNIQUE, NOT NULL
    + String telefone // NOT NULL
  }

  class HorarioTrabalho {
    + Integer id // PK
    + Integer profissionalId // FK Profissional(id), NOT NULL
    + DiaSemana diaSemana // NOT NULL
    + LocalTime horaInicio // NOT NULL
    + LocalTime horaFim // NOT NULL
    + LocalTime inicioPausa // opcional
    + LocalTime fimPausa // opcional
  }

  enum DiaSemana {
    SEGUNDA
    TERCA
    QUARTA
    QUINTA
    SABADO
    DOMINGO
  }

  note right of HorarioTrabalho
    Define a disponibilidade semanal
    do profissional, incluindo pausas.
  end note

  Profissional "1" --> "0..*" HorarioTrabalho : define
}

' ==================== CONTEXTO DE MARKETING E FIDELIZAÇÃO ====================
package "Contexto de Marketing e Fidelização" {
  class Cliente {
    + Integer id // PK
    + String nome // NOT NULL
    + String email // UNIQUE, NOT NULL
    + String telefone // NOT NULL
    + int pontosFidelidade = 0 // DEFAULT
  }

  class Voucher {
    + Integer id // PK
    + Integer clienteId // FK Cliente(id), NOT NULL
    + String codigo // UNIQUE, NOT NULL
    + BigDecimal valorDesconto // NOT NULL
    + StatusVoucher status = GERADO
    + LocalDateTime expiraEm // opcional
  }

  enum StatusVoucher {
    GERADO
    UTILIZADO
    EXPIRADO
  }

  note right of Cliente
    Regras:
    • R$1,00 gasto = 1 ponto
    • 100 pontos = R$10,00 desconto
    • Vouchers gerados e controlados por expiração
  end note

  Cliente "1" --> "0..*" Voucher : gera
}

' ==================== CONTEXTO DE VENDAS E ESTOQUE ====================
package "Contexto de Vendas e Estoque" {
  class Produto {
    + Integer id // PK
    + String nome // NOT NULL
    + BigDecimal preco // NOT NULL
    + int estoque = 0 // NOT NULL, DEFAULT
  }

  class Venda {
    + Integer id // PK
    + Integer clienteId // FK Cliente(id), opcional
    + LocalDateTime dataVenda = NOW()
    + Integer voucherId // FK Voucher(id), opcional
    + BigDecimal valorTotal // NOT NULL
    + String observacoes // opcional
  }

  class ItemVenda {
    + Integer id // PK
    + Integer vendaId // FK Venda(id), NOT NULL
    + Integer produtoId // FK Produto(id), opcional
    + String descricao // NOT NULL
    + int quantidade = 1 // NOT NULL
    + BigDecimal precoUnitario // NOT NULL
    + BigDecimal precoTotal // NOT NULL
    + TipoItem tipo // NOT NULL
  }

  enum TipoItem {
    PRODUTO
    SERVICO
  }

  class Pagamento {
    + Integer id // PK
    + Integer vendaId // FK Venda(id), NOT NULL
    + BigDecimal valor // NOT NULL
    + MetodoPagamento metodo // NOT NULL
    + StatusPagamento status = PENDENTE
    + LocalDateTime dataProcessamento = NOW()
  }

  enum MetodoPagamento {
    DINHEIRO
    CREDITO
    DEBITO
    PIX
  }

  enum StatusPagamento {
    PENDENTE
    CONFIRMADO
    CANCELADO
  }

  note right of Venda
    Regras:
    • Venda baixa no estoque
    • Cada Venda precisa de Pagamento
  end note

  Venda "1" --> "0..*" ItemVenda : contém
  Produto "1" --> "0..*" ItemVenda : vinculado
  Venda "1" --> "0..*" Pagamento : paga
  Cliente "1" --> "0..*" Venda : realiza
  Voucher "1" --> "0..*" Venda : aplicado
}

' ========================== RELAÇÕES ENTRE CONTEXTOS ==========================
Agendamento --> Servico : referencia
Agendamento --> Profissional : referencia
Agendamento --> Cliente : referencia

@enduml
